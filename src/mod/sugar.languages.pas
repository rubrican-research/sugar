unit sugar.languages;
{** This unit was generated by Claude 3.7 on 17-04-2025 **}
{ISO 639-2 Language codes}
interface

uses
    classes, sysutils, fgl;

type
    { TLanguage }
    TLanguage = class
        ISO: shortstring;
        Name: string;
        constructor Create(_iso: shortstring; _name: string);
    end;
    { TLanguages }
    TLanguages = class(specialize TFPGMapObject<shortstring, TLanguage>)
        constructor Create(AFreeObjects: boolean=True);
        function add(_iso: shortstring; _name: string): TLanguages; overload;
    end;

{ISO 639-2 Language codes}
const
  ISO693_English     = 'eng';
  ISO693_Arabic      = 'ara';
  ISO693_Albanian    = 'alb';
  ISO693_Amharic     = 'amh';
  ISO693_Armenian    = 'arm';
  ISO693_Azerbaijani = 'aze';
  ISO693_Basque      = 'baq';
  ISO693_Belarusian  = 'bel';
  ISO693_Bengali     = 'ben';
  ISO693_Bosnian     = 'bos';
  ISO693_Bulgarian   = 'bul';
  ISO693_Catalan     = 'cat';
  ISO693_Chinese     = 'chi';
  ISO693_Croatian    = 'hrv';
  ISO693_Czech       = 'cze';
  ISO693_Danish      = 'dan';
  ISO693_Dutch       = 'dut';
  ISO693_Estonian    = 'est';
  ISO693_Finnish     = 'fin';
  ISO693_French      = 'fre';
  ISO693_Georgian    = 'geo';
  ISO693_German      = 'ger';
  ISO693_Greek       = 'gre';
  ISO693_Gujarati    = 'guj';
  ISO693_Hebrew      = 'heb';
  ISO693_Hindi       = 'hin';
  ISO693_Hungarian   = 'hun';
  ISO693_Icelandic   = 'ice';
  ISO693_Indonesian  = 'ind';
  ISO693_Italian     = 'ita';
  ISO693_Japanese    = 'jpn';
  ISO693_Kannada     = 'kan';
  ISO693_Kazakh      = 'kaz';
  ISO693_Korean      = 'kor';
  ISO693_Latvian     = 'lav';
  ISO693_Lithuanian  = 'lit';
  ISO693_Macedonian  = 'mac';
  ISO693_Malay       = 'may';
  ISO693_Malayalam   = 'mal';
  ISO693_Marathi     = 'mar';
  ISO693_Mongolian   = 'mon';
  ISO693_Nepali      = 'nep';
  ISO693_Norwegian   = 'nor';
  ISO693_Persian     = 'per';
  ISO693_Polish      = 'pol';
  ISO693_Portuguese  = 'por';
  ISO693_Romanian    = 'rum';
  ISO693_Russian     = 'rus';
  ISO693_Serbian     = 'srp';
  ISO693_Slovak      = 'slo';
  ISO693_Slovenian   = 'slv';
  ISO693_Spanish     = 'spa';
  ISO693_Swahili     = 'swa';
  ISO693_Swedish     = 'swe';
  ISO693_Tamil       = 'tam';
  ISO693_Telugu      = 'tel';
  ISO693_Thai        = 'tha';
  ISO693_Turkish     = 'tur';
  ISO693_Ukrainian   = 'ukr';
  ISO693_Urdu        = 'urd';
  ISO693_Uzbek       = 'uzb';
  ISO693_Vietnamese  = 'vie';
  ISO693_Welsh       = 'wel';

function initLangsEN: TLanguages;
function initLangsDE: TLanguages;
function initLangsFR: TLanguages;

{helper. singleton lists}
function LangsEN: TLanguages;
function langsDE: TLanguages;
function langsFR: TLanguages;

implementation

type
    TLanguagesList = class(specialize TFPGMapObject<string, TLanguages>);
var
    myLanguagesList : TLanguagesList;

function initLangsEN: TLanguages;
begin
    Result := TLanguages.Create;
    with Result do
    begin
        add(ISO693_English     , 'English');
        add(ISO693_Arabic      , 'Arabic');
        add(ISO693_Albanian    , 'Albanian');
        add(ISO693_Amharic     , 'Amharic');
        add(ISO693_Armenian    , 'Armenian');
        add(ISO693_Azerbaijani , 'Azerbaijani');
        add(ISO693_Basque      , 'Basque');
        add(ISO693_Belarusian  , 'Belarusian');
        add(ISO693_Bengali     , 'Bengali');
        add(ISO693_Bosnian     , 'Bosnian');
        add(ISO693_Bulgarian   , 'Bulgarian');
        add(ISO693_Catalan     , 'Catalan');
        add(ISO693_Chinese     , 'Chinese');
        add(ISO693_Croatian    , 'Croatian');
        add(ISO693_Czech       , 'Czech');
        add(ISO693_Danish      , 'Danish');
        add(ISO693_Dutch       , 'Dutch');
        add(ISO693_Estonian    , 'Estonian');
        add(ISO693_Finnish     , 'Finnish');
        add(ISO693_French      , 'French');
        add(ISO693_Georgian    , 'Georgian');
        add(ISO693_German      , 'German');
        add(ISO693_Greek       , 'Greek');
        add(ISO693_Gujarati    , 'Gujarati');
        add(ISO693_Hebrew      , 'Hebrew');
        add(ISO693_Hindi       , 'Hindi');
        add(ISO693_Hungarian   , 'Hungarian');
        add(ISO693_Icelandic   , 'Icelandic');
        add(ISO693_Indonesian  , 'Indonesian');
        add(ISO693_Italian     , 'Italian');
        add(ISO693_Japanese    , 'Japanese');
        add(ISO693_Kannada     , 'Kannada');
        add(ISO693_Kazakh      , 'Kazakh');
        add(ISO693_Korean      , 'Korean');
        add(ISO693_Latvian     , 'Latvian');
        add(ISO693_Lithuanian  , 'Lithuanian');
        add(ISO693_Macedonian  , 'Macedonian');
        add(ISO693_Malay       , 'Malay');
        add(ISO693_Malayalam   , 'Malayalam');
        add(ISO693_Marathi     , 'Marathi');
        add(ISO693_Mongolian   , 'Mongolian');
        add(ISO693_Nepali      , 'Nepali');
        add(ISO693_Norwegian   , 'Norwegian');
        add(ISO693_Persian     , 'Persian');
        add(ISO693_Polish      , 'Polish');
        add(ISO693_Portuguese  , 'Portuguese');
        add(ISO693_Romanian    , 'Romanian');
        add(ISO693_Russian     , 'Russian');
        add(ISO693_Serbian     , 'Serbian');
        add(ISO693_Slovak      , 'Slovak');
        add(ISO693_Slovenian   , 'Slovenian');
        add(ISO693_Spanish     , 'Spanish');
        add(ISO693_Swahili     , 'Swahili');
        add(ISO693_Swedish     , 'Swedish');
        add(ISO693_Tamil       , 'Tamil');
        add(ISO693_Telugu      , 'Telugu');
        add(ISO693_Thai        , 'Thai');
        add(ISO693_Turkish     , 'Turkish');
        add(ISO693_Ukrainian   , 'Ukrainian');
        add(ISO693_Urdu        , 'Urdu');
        add(ISO693_Uzbek       , 'Uzbek');
        add(ISO693_Vietnamese  , 'Vietnamese');
        add(ISO693_Welsh       , 'Welsh');
    end;
end;

function initLangsDE: TLanguages;
begin
    Result := TLanguages.Create;
    with Result do
    begin
        add(ISO693_English     , 'Englisch');
        add(ISO693_Arabic      , 'Arabisch');
        add(ISO693_Albanian    , 'Albanisch');
        add(ISO693_Amharic     , 'Amharisch');
        add(ISO693_Armenian    , 'Armenisch');
        add(ISO693_Azerbaijani , 'Aserbaidschanisch');
        add(ISO693_Basque      , 'Baskisch');
        add(ISO693_Belarusian  , 'Belarussisch');
        add(ISO693_Bengali     , 'Bengalisch');
        add(ISO693_Bosnian     , 'Bosnisch');
        add(ISO693_Bulgarian   , 'Bulgarisch');
        add(ISO693_Catalan     , 'Katalanisch');
        add(ISO693_Chinese     , 'Chinesisch');
        add(ISO693_Croatian    , 'Kroatisch');
        add(ISO693_Czech       , 'Tschechisch');
        add(ISO693_Danish      , 'Dänisch');
        add(ISO693_Dutch       , 'Niederländisch');
        add(ISO693_Estonian    , 'Estnisch');
        add(ISO693_Finnish     , 'Finnisch');
        add(ISO693_French      , 'Französisch');
        add(ISO693_Georgian    , 'Georgisch');
        add(ISO693_German      , 'Deutsch');
        add(ISO693_Greek       , 'Griechisch');
        add(ISO693_Gujarati    , 'Gujarati');
        add(ISO693_Hebrew      , 'Hebräisch');
        add(ISO693_Hindi       , 'Hindi');
        add(ISO693_Hungarian   , 'Ungarisch');
        add(ISO693_Icelandic   , 'Isländisch');
        add(ISO693_Indonesian  , 'Indonesisch');
        add(ISO693_Italian     , 'Italienisch');
        add(ISO693_Japanese    , 'Japanisch');
        add(ISO693_Kannada     , 'Kannada');
        add(ISO693_Kazakh      , 'Kasachisch');
        add(ISO693_Korean      , 'Koreanisch');
        add(ISO693_Latvian     , 'Lettisch');
        add(ISO693_Lithuanian  , 'Litauisch');
        add(ISO693_Macedonian  , 'Mazedonisch');
        add(ISO693_Malay       , 'Malaiisch');
        add(ISO693_Malayalam   , 'Malayalam');
        add(ISO693_Marathi     , 'Marathi');
        add(ISO693_Mongolian   , 'Mongolisch');
        add(ISO693_Nepali      , 'Nepalesisch');
        add(ISO693_Norwegian   , 'Norwegisch');
        add(ISO693_Persian     , 'Persisch');
        add(ISO693_Polish      , 'Polnisch');
        add(ISO693_Portuguese  , 'Portugiesisch');
        add(ISO693_Romanian    , 'Rumänisch');
        add(ISO693_Russian     , 'Russisch');
        add(ISO693_Serbian     , 'Serbisch');
        add(ISO693_Slovak      , 'Slowakisch');
        add(ISO693_Slovenian   , 'Slowenisch');
        add(ISO693_Spanish     , 'Spanisch');
        add(ISO693_Swahili     , 'Suaheli');
        add(ISO693_Swedish     , 'Schwedisch');
        add(ISO693_Tamil       , 'Tamil');
        add(ISO693_Telugu      , 'Telugu');
        add(ISO693_Thai        , 'Thailändisch');
        add(ISO693_Turkish     , 'Türkisch');
        add(ISO693_Ukrainian   , 'Ukrainisch');
        add(ISO693_Urdu        , 'Urdu');
        add(ISO693_Uzbek       , 'Usbekisch');
        add(ISO693_Vietnamese  , 'Vietnamesisch');
        add(ISO693_Welsh       , 'Walisisch');
    end;
end;

function initLangsFR: TLanguages;
begin
    Result := TLanguages.Create;
    with Result do
    begin
        add(ISO693_English     , 'Anglais');
        add(ISO693_Arabic      , 'Arabe');
        add(ISO693_Albanian    , 'Albanais');
        add(ISO693_Amharic     , 'Amharique');
        add(ISO693_Armenian    , 'Arménien');
        add(ISO693_Azerbaijani , 'Azerbaïdjanais');
        add(ISO693_Basque      , 'Basque');
        add(ISO693_Belarusian  , 'Biélorusse');
        add(ISO693_Bengali     , 'Bengali');
        add(ISO693_Bosnian     , 'Bosniaque');
        add(ISO693_Bulgarian   , 'Bulgare');
        add(ISO693_Catalan     , 'Catalan');
        add(ISO693_Chinese     , 'Chinois');
        add(ISO693_Croatian    , 'Croate');
        add(ISO693_Czech       , 'Tchèque');
        add(ISO693_Danish      , 'Danois');
        add(ISO693_Dutch       , 'Néerlandais');
        add(ISO693_Estonian    , 'Estonien');
        add(ISO693_Finnish     , 'Finnois');
        add(ISO693_French      , 'Français');
        add(ISO693_Georgian    , 'Géorgien');
        add(ISO693_German      , 'Allemand');
        add(ISO693_Greek       , 'Grec');
        add(ISO693_Gujarati    , 'Gujarati');
        add(ISO693_Hebrew      , 'Hébreu');
        add(ISO693_Hindi       , 'Hindi');
        add(ISO693_Hungarian   , 'Hongrois');
        add(ISO693_Icelandic   , 'Islandais');
        add(ISO693_Indonesian  , 'Indonésien');
        add(ISO693_Italian     , 'Italien');
        add(ISO693_Japanese    , 'Japonais');
        add(ISO693_Kannada     , 'Kannada');
        add(ISO693_Kazakh      , 'Kazakh');
        add(ISO693_Korean      , 'Coréen');
        add(ISO693_Latvian     , 'Letton');
        add(ISO693_Lithuanian  , 'Lituanien');
        add(ISO693_Macedonian  , 'Macédonien');
        add(ISO693_Malay       , 'Malais');
        add(ISO693_Malayalam   , 'Malayalam');
        add(ISO693_Marathi     , 'Marathi');
        add(ISO693_Mongolian   , 'Mongol');
        add(ISO693_Nepali      , 'Népalais');
        add(ISO693_Norwegian   , 'Norvégien');
        add(ISO693_Persian     , 'Persan');
        add(ISO693_Polish      , 'Polonais');
        add(ISO693_Portuguese  , 'Portugais');
        add(ISO693_Romanian    , 'Roumain');
        add(ISO693_Russian     , 'Russe');
        add(ISO693_Serbian     , 'Serbe');
        add(ISO693_Slovak      , 'Slovaque');
        add(ISO693_Slovenian   , 'Slovène');
        add(ISO693_Spanish     , 'Espagnol');
        add(ISO693_Swahili     , 'Swahili');
        add(ISO693_Swedish     , 'Suédois');
        add(ISO693_Tamil       , 'Tamoul');
        add(ISO693_Telugu      , 'Telugu');
        add(ISO693_Thai        , 'Thaï');
        add(ISO693_Turkish     , 'Turc');
        add(ISO693_Ukrainian   , 'Ukrainien');
        add(ISO693_Urdu        , 'Ourdou');
        add(ISO693_Uzbek       , 'Ouzbek');
        add(ISO693_Vietnamese  , 'Vietnamien');
        add(ISO693_Welsh       , 'Gallois');
    end;
end;

type
    TFuncInitLang = function: TLanguages;

function getLangsObj(_isoCode: shortstring; _factory: TFuncInitLang): TLanguages;
var
	_i: Integer;
begin
    if not myLanguagesList.Find(_isoCode, _i) then begin
        if assigned(_factory) then begin
            Result := _factory();
            myLanguagesList.Add(_isoCode, Result);
        end
        else
            raise Exception.Create('getLangsObj:: Factory function is not assigned');
	end
    else
        Result := myLanguagesList.Data[_i];
end;

function LangsEN: TLanguages;
begin
    Result := getLangsObj(ISO693_English, @initLangsEN);
end;

function langsDE: TLanguages;
begin
    Result := getLangsObj(ISO693_German, @initLangsDE);
end;

function langsFR: TLanguages;
begin
    Result := getLangsObj(ISO693_French, @initLangsFR);
end;

{ TLanguage }
constructor TLanguage.Create(_iso: shortstring; _name: string);
begin
    inherited Create;
    ISO := _iso;
    Name := _name;
end;

{ TLanguages }
constructor TLanguages.Create(AFreeObjects: boolean);
begin
    inherited Create(AFreeObjects);
    sorted := True;
end;

function TLanguages.add(_iso: shortstring; _name: string): TLanguages;
var
    _i: integer;
begin
    Result := self;
    if not find(_iso, _i) then
    begin
        inherited add(_iso, TLanguage.Create(_iso, _name));
    end;
end;

initialization
    myLanguagesList := TLanguagesList.Create;

finalization
    myLanguagesList.Free;

end.
